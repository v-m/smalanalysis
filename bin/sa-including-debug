#!/usr/bin/env python

"""Showing the way diffdex includes or not packages"""

__author__ = "Vincenzo Musco (http://www.vmusco.com)"
__date__ = "2017-09-26"

import argparse
import re
import sys

from smalanalysis.smali.project import SmaliProject, ModeDeprecatedError

parser = argparse.ArgumentParser(description='List project classes and the way diffdex includes/excludes it.')
parser.add_argument('smali', type=str,
                    help='Folder containing smali files')
parser.add_argument('pkg', type=str,
                    help='The app package name')
parser.add_argument('-P', '--only-app-package', action='store_true',
                    help='Includes only classes in the app package')
parser.add_argument('-U', '--include-unpackaged', action='store_true',
                    help='Includes classes which are not in a package')
parser.add_argument('-e', '--exclude-lists', type=str, nargs='*',
                    help='Files containing exclude lists')
parser.add_argument('-i', '--include-lists', type=str, nargs='*',
                    help='Files containing included lists')

args = parser.parse_args()

pkg = None
if args.only_app_package:
    pkg = args.pkg
    print("Including only classes in %s" % pkg)

if args.exclude_lists:
    print("Ignoring classes included in these files: %s" % args.exclude_lists)

if args.include_lists:
    print("Considering classes included in these files: %s" % args.include_lists)

if args.include_unpackaged:
    print("Including apps outside of any package...")

try:
    run = SmaliProject.parse_project(args.smali, pkg, args.exclude_lists, args.include_lists,
                                     args.include_unpackaged)
    full_project = SmaliProject.parse_project(args.smali, None, None, None, True)
except FileNotFoundError:
    print("File not found")
    sys.exit(1)
except ModeDeprecatedError:
    print("Folder mode is not supported anymore")
    sys.exit(1)

included = set()
for c in run.classes:
    included.add(c.name)

pattern = re.compile('L(.*)/(.*);')
no_package_pattern = re.compile('L([^/]*);')

packages = dict()
status = dict()

skips = dict()

if args.exclude_lists is not None:
    for ff in args.exclude_lists:
        skips[ff] = SmaliProject.load_rules_list(ff)

includes = dict()

if args.include_lists is not None:
    for ff in args.include_lists:
        includes[ff] = SmaliProject.load_rules_list(ff)

for c in full_project.classes:
    ret = pattern.match(c.name)

    if ret is None:
        # Root package!
        ret = no_package_pattern.match(c.name)
        one_package, clazz = None, ret.group(1)
    else:
        one_package, clazz = ret.group(1).replace('/', '.'), ret.group(2)

    if one_package not in packages:
        packages[one_package] = set()

    packages[one_package].add((clazz, c.name in included))

for one_package in packages:
    why_included, why_excluded = None, None

    if pkg is not None and one_package != args.pkg:
        why_excluded = "NOT IN APP PKG"

    if one_package is not None:
        for exclude_list in skips:
            for p in skips[exclude_list]:
                if p in one_package:
                    why_excluded = 'EXCLUDED BY %s' % exclude_list

        for include_list in includes:
            for p in includes[include_list]:
                if p in one_package:
                    why_included = 'INCLUDED BY %s' % include_list
    else:
        if args.include_unpackaged:
            why_included = 'flag -U set'
        else:
            why_excluded = 'flag -U not set'

    for clazz in packages[one_package]:
        if clazz[1]:
            print('%75s %s' % (one_package, '\033[92mANALYZED\033[39m %s' % ("" if why_included is None else why_included)))
        else:
            print('%75s - %s' % (one_package, '\033[91mSKIPPED\033[39m %s' % ("" if why_excluded is None else why_excluded)))

        break
