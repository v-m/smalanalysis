#!/usr/bin/env python

# Computing Metrics
# Author: Vincenzo Musco (http://www.vmusco.com)
# Creation date: 2017-09-15
import argparse
import sys
from smalanalysis.smali import SmaliObject, ChangesTypes, SmaliProject, Metrics

parser = argparse.ArgumentParser(description='Compute evolution metrics between two smali versions.')
parser.add_argument('smaliv1', type=str,
                    help='Version 1 folder containing smali files')
parser.add_argument('smaliv2', type=str,
                    help='Version 2 folder containing smali files')
parser.add_argument('pkg', type=str,
                    help='The app package name')
parser.add_argument('--verbose', '-v', action='store_true',
                    help='Show metrics details')
parser.add_argument('--onlyapppackage', '-P', action='store_true',
                    help='Includes only classes in the app package specified')
parser.add_argument('--fulllinesofcode', '-f', action='store_true',
                    help='Show full lines instead of opcodes for differences')
parser.add_argument('--aggregateoperators', '-a', action='store_true',
                    help='Aggregate the operator by their first keywork.')
parser.add_argument('--include-unpackaged', '-U', action='store_true',
                    help='Includes classes which are not in a package')
parser.add_argument('--exclude-lists', '-e', type=str, nargs='*',
                    help='Files containing excluded list')
parser.add_argument('--include-lists', '-i', type=str, nargs='*',
                    help='Files containing included list')
parser.add_argument('--no-innerclasses-split', '-I', action='store_true',
                    help='Do not split metrics for inner/outer classes')

args = parser.parse_args()

pkg = None
if args.onlyapppackage:
    pkg = args.pkg
    if args.verbose:
        print("Including classes only in %s" % pkg)

if args.verbose and args.exclude_lists:
    print("Ignoring classes includes in these files: %s" % args.exclude_lists)

if args.aggregateoperators and args.fulllinesofcode:
    print("Aggregation and full lines cannot be enabled at the same time!")
    sys.exit(1)

try:
    old = SmaliProject.SmaliProject()
    old.parseProject(args.smaliv1, pkg, args.exclude_lists, args.include_lists, args.include_unpackaged)
    #parseProject(old, args.smaliv1, pkg, args.exclude_lists, args.include_lists, args.include_unpackaged)

    if old.isProjectObfuscated():
        raise Metrics.ProjectObfuscatedException()

    mold, moldin = Metrics.countMethodsInProject(old)

    new = SmaliProject.SmaliProject()
    new.parseProject(args.smaliv2, pkg, args.exclude_lists, args.include_lists, args.include_unpackaged)
    #parseProject(new, args.smaliv2, pkg, args.exclude_lists, args.include_lists, args.include_unpackaged)

    mnew, mnewin = Metrics.countMethodsInProject(new)

    if new.isProjectObfuscated():
        raise Metrics.ProjectObfuscatedException()

    diff = old.differences(new, [])

    metrics = {}

    if args.no_innerclasses_split:
        Metrics.initMetricsDict("", metrics)
        metrics["#M-"] = mold + moldin
        metrics["#M+"] =  mnew + mnewin
        Metrics.computeMetrics(diff, metrics, "", not args.fulllinesofcode, args.aggregateoperators)

    else:
        innerDiff, outerDiff = Metrics.splitInnerOuterChanged(diff)

        Metrics.initMetricsDict("OUT", metrics)
        Metrics.initMetricsDict("IN", metrics)
        metrics["IN#M-"] = moldin
        metrics["IN#M+"] = mnewin
        metrics["OUT#M-"] = mold
        metrics["OUT#M+"] = mnew

        Metrics.computeMetrics(outerDiff, metrics, "OUT", not args.fulllinesofcode, args.aggregateoperators)
        Metrics.computeMetrics(innerDiff, metrics, "IN", not args.fulllinesofcode, args.aggregateoperators)

except Metrics.ProjectObfuscatedException:
    print("This project is obfuscated. Unable to proceed.", file=sys.stderr)
    sys.exit(1)

bases = [""]
if not args.no_innerclasses_split:
    bases = ["IN", "OUT"]

if args.verbose:
    for b in bases:
        if len(b) > 0:
            print("===== {} CLASSES =====".format(b))

        print("v0 has {} classes/{} methods, v1 has {} classes/{} methods.".format(metrics["{}{}".format(b, "#C-")], metrics["{}{}".format(b, "#M-")], metrics["{}{}".format(b, "#C+")], metrics["{}{}".format(b, "#M+")]))
        print("B = %d. A = %d. D = %d." % (metrics["{}{}".format(b, "B")], metrics["{}{}".format(b, "A")], metrics["{}{}".format(b, "D")]))
        print("E = %d. C = %d." % (metrics["{}{}".format(b, "E")], metrics["{}{}".format(b, "C")]))
        print("Classes - Added: %5d, Changed: %5d, Deleted: %5d." % (metrics["{}{}".format(b, "CA")], metrics["{}{}".format(b, "CC")], metrics["{}{}".format(b, "CD")]))
        print("Methods - Added: %5d, Revised: %5d, Changed: %5d, Renamed: %5d, Deleted: %5d." % (
        metrics["{}{}".format(b, "MA")], metrics["{}{}".format(b, "MRev")], metrics["{}{}".format(b, "MC")], metrics["{}{}".format(b, "MR")], metrics["{}{}".format(b, "MD")]))
        print(" Fields - Added: %5d, Changed: %5d, Renamed: %5d, Deleted: %5d." % (
        metrics["{}{}".format(b, "FA")], metrics["{}{}".format(b, "FC")], metrics["{}{}".format(b, "FR")], metrics["{}{}".format(b, "FD")]))
        print("Added lines:")
        for l in metrics["{}{}".format(b, "addedLines")]:
            print("\t- {}".format(l))
        print("Removed lines:")
        for l in metrics["{}{}".format(b, "removedLines")]:
            print("\t- {}".format(l))
else:
    # for b in bases:
    #     for k in keys:
    #         print("{}{},".format(b, k), end='')
    #
    #     print("{}addedLines,{}removedLines,".format(b, b), end='')
    #
    # print("")

    for b in bases:
        for k in Metrics.keys:
            print("%d," % metrics["{}{}".format(b, k)], end='')
        print('|'.join(metrics["{}addedLines".format(b)]), end='')
        print(",", end='')
        print('|'.join(metrics["{}removedLines".format(b)]), end='')
        print(",", end='')

    print("")
