#!/usr/bin/env python

"""Computing Metrics"""

__author__ = "Vincenzo Musco (http://www.vmusco.com)"
__date__ = "2017-09-15"

import argparse
import sys
from smalanalysis.smali import metrics
from smalanalysis.smali.project import SmaliProject, ModeDeprecatedError

parser = argparse.ArgumentParser(description='Compute evolution metrics between two smali versions.')
parser.add_argument('smaliv1', type=str,
                    help='Version 1 folder containing smali files')
parser.add_argument('smaliv2', type=str,
                    help='Version 2 folder containing smali files')
parser.add_argument('pkg', type=str,
                    help='The app package name')
parser.add_argument('-v', '--verbose', action='store_true',
                    help='Show metrics details')
parser.add_argument('-P', '--only-app-package', action='store_true',
                    help='Includes only classes in the app package specified')
parser.add_argument('-f', '--full-lines-of-code', action='store_true',
                    help='Show full lines instead of opcodes for differences')
parser.add_argument('-a', '--aggregate-operators', action='store_true',
                    help='Aggregate the operator by their first keyword.')
parser.add_argument('-U', '--include-unpackaged', action='store_true',
                    help='Includes classes which are not in a package')
parser.add_argument('-e', '--exclude-lists', type=str, nargs='*',
                    help='Files containing excluded list')
parser.add_argument('-i', '--include-lists', type=str, nargs='*',
                    help='Files containing included list')
parser.add_argument('-I', '--no-innerclasses-split', action='store_true',
                    help='Do not split metrics for inner/outer classes')

args = parser.parse_args()

pkg = None
if args.only_app_package:
    pkg = args.pkg
    if args.verbose:
        print("Including classes only in %s" % pkg)

if args.verbose and args.exclude_lists:
    print("Ignoring classes includes in these files: %s" % args.exclude_lists)

if args.aggregate_operators and args.full_lines_of_code:
    print("Aggregation and full lines cannot be enabled at the same time!")
    sys.exit(1)

try:
    old = SmaliProject.parse_project(args.smaliv1, pkg, args.exclude_lists, args.include_lists, args.include_unpackaged)

    if old.is_project_obfuscated():
        raise metrics.ProjectObfuscatedException()

    new = SmaliProject.parse_project(args.smaliv2, pkg, args.exclude_lists, args.include_lists, args.include_unpackaged)

    if new.is_project_obfuscated():
        raise metrics.ProjectObfuscatedException()

    metrics_old, metrics_old_inner = metrics.count_methods_in_project(old)
    metrics_new, metrics_new_inner = metrics.count_methods_in_project(new)

    diff = old.differences(new, [])

    computed_metrics = {}

    if args.no_innerclasses_split:
        metrics.init_metrics_dict("", computed_metrics)
        computed_metrics["#M-"] = metrics_old + metrics_old_inner
        computed_metrics["#M+"] = metrics_new + metrics_new_inner
        metrics.compute_metrics(diff, computed_metrics, "", not args.full_lines_of_code, args.aggregate_operators)

    else:
        innerDiff, outerDiff = metrics.split_inner_outer_changed(diff)

        metrics.init_metrics_dict("OUT", computed_metrics)
        metrics.init_metrics_dict("IN", computed_metrics)
        computed_metrics["IN#M-"] = metrics_old_inner
        computed_metrics["IN#M+"] = metrics_new_inner
        computed_metrics["OUT#M-"] = metrics_old
        computed_metrics["OUT#M+"] = metrics_new

        metrics.compute_metrics(outerDiff, computed_metrics, "OUT", not args.full_lines_of_code, args.aggregate_operators)
        metrics.compute_metrics(innerDiff, computed_metrics, "IN", not args.full_lines_of_code, args.aggregate_operators)

except metrics.ProjectObfuscatedException:
    print("This project is obfuscated. Unable to proceed.", file=sys.stderr)
    sys.exit(1)
except FileNotFoundError:
    print("File not found")
    sys.exit(1)
except ModeDeprecatedError:
    print("Folder mode is not supported anymore")
    sys.exit(1)

bases = [""]
if not args.no_innerclasses_split:
    bases = ["IN", "OUT"]

if args.verbose:
    for b in bases:
        if len(b) > 0:
            print("===== {} CLASSES =====".format(b))

        print("v0 has {} classes/{} methods, v1 has {} classes/{} methods.".format(computed_metrics["{}{}".format(b, "#C-")], computed_metrics["{}{}".format(b, "#M-")], computed_metrics["{}{}".format(b, "#C+")], computed_metrics["{}{}".format(b, "#M+")]))
        print("B = %d. A = %d. D = %d." % (computed_metrics["{}{}".format(b, "B")], computed_metrics["{}{}".format(b, "A")], computed_metrics["{}{}".format(b, "D")]))
        print("E = %d. C = %d." % (computed_metrics["{}{}".format(b, "E")], computed_metrics["{}{}".format(b, "C")]))
        print("Classes - Added: %5d, Changed: %5d, Deleted: %5d." % (computed_metrics["{}{}".format(b, "CA")], computed_metrics["{}{}".format(b, "CC")], computed_metrics["{}{}".format(b, "CD")]))
        print("Methods - Added: %5d, Revised: %5d, Changed: %5d, Renamed: %5d, Deleted: %5d." % (computed_metrics["{}{}".format(b, "MA")], computed_metrics["{}{}".format(b, "MRev")], computed_metrics["{}{}".format(b, "MC")], computed_metrics["{}{}".format(b, "MR")], computed_metrics["{}{}".format(b, "MD")]))
        print(" Fields - Added: %5d, Changed: %5d, Renamed: %5d, Deleted: %5d." % (computed_metrics["{}{}".format(b, "FA")], computed_metrics["{}{}".format(b, "FC")], computed_metrics["{}{}".format(b, "FR")], computed_metrics["{}{}".format(b, "FD")]))
        print("Added lines:")
        for l in computed_metrics["{}{}".format(b, "addedLines")]:
            print("\t- {}".format(l))
        print("Removed lines:")
        for l in computed_metrics["{}{}".format(b, "removedLines")]:
            print("\t- {}".format(l))
else:
    headers_printed = False
    for b in bases:
        if not headers_printed:
            print("Scope", end=',')
            for k in filter(lambda x: type(metrics[x]) != set and x.startswith(b), metrics.keys()):
                print(k[len(b):], end=',')
            print("addedLines", end=',')
            print("removedLines")
            headers_printed = True

        print(b, end=',')
        for k in filter(lambda x: type(metrics[x]) != set and x.startswith(b), metrics.keys()):
            print("%d" % metrics[k], end=',')
        print('|'.join(metrics["{}addedLines".format(b)]), end=',')
        print('|'.join(metrics["{}removedLines".format(b)]))
