#!/usr/bin/env python

# Convenience method for getting smali bytecode from an APK using baksmali
# Author: Vincenzo Musco (http://www.vmusco.com)
# Creation date: 2017-09

import argparse
import shutil
import subprocess
import os
import zipfile
import re
import smalanalysis

COMPRESSION_METHOD = zipfile.ZIP_DEFLATED

def zipdir(path, smalizip):
    for root, dirs, files in os.walk(path):
        for file in files:
            pth = os.path.join(root, file)
            pthinzip = pth[len(path):]

            if pthinzip[0] == os.sep:
                pthinzip = pthinzip[1:]

            smalizip.write(pth, pthinzip)

def runSmali(apkpath, smalipath, overwrite=False, buildZip=False, mergeFolders=True, custom_baksmali=None):
    if os.path.exists(smalipath):
        if overwrite:
            if os.path.isfile(smalipath):
                os.remove(smalipath)
            else:
                shutil.rmtree(smalipath)
        else:
            return

    dexesfolder = []
    z = zipfile.ZipFile(apkpath)
    for file in [file for file in z.namelist() if re.match('^classes[0-9]*.dex$', file)]:
        fullsmalipath = '_'.join([smalipath, file])
        dexesfolder.append(fullsmalipath)

        if os.path.exists(fullsmalipath):
            shutil.rmtree(fullsmalipath)

        baksmali_bin = custom_baksmali
        if baksmali_bin is None:
            baksmali_bin = smalanalysis.get_baksmali_bin()

        task = subprocess.Popen('java -jar %s disassemble "%s/%s" -o "%s"' % (baksmali_bin, apkpath, file, fullsmalipath), shell=True, stdout=subprocess.PIPE)
        task.wait()

    z.close()

    if buildZip:
        with zipfile.ZipFile(smalipath, 'w', compression=COMPRESSION_METHOD) as smalizip:
            for dir in dexesfolder:
                zipdir(dir, smalizip)
                shutil.rmtree(dir)
    else:
        if mergeFolders:
            os.mkdir(smalipath)

            for dir in dexesfolder:
                for sdir in os.listdir(dir):
                    shutil.move('/'.join([dir, sdir]), '/'.join([smalipath, sdir]))

                shutil.rmtree(dir)

if __name__ == '__main__':
    parser = argparse.ArgumentParser(description='Extract smali content.')
    parser.add_argument('apkpath', type=str,
                        help='The full path to the apk')
    parser.add_argument('output', type=str,
                         help='Where to output smali files', nargs='?', default = None )
    parser.add_argument('--overwrite', '-o', action='store_true',
                        help='Delete all previous exportation')
    parser.add_argument('--folder', '-f', action='store_true',
                        help='Disassemble in a folder instead than a ZIP file (deprecated)')
    parser.add_argument('--dont-merge', '-D', action='store_true',
                        help='If --folder, don\'t merge back all dexes in one folder')
    parser.add_argument('--custom-baksmali', '-b', type=str, default = None,
                        help='Do not use the included baksmali binary and specify one')

    args = parser.parse_args()

    apkpath = args.apkpath
    output = args.output
    dofolder = args.folder
    dontmerge = args.dont_merge

    if output is None:
        output = '%s.smali'%apkpath

    overwrite = args.overwrite

    runSmali(apkpath, output, overwrite, not dofolder, not dontmerge, args.custom_baksmali)
